using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

public class Task
{
    public string Description { get; set; }
    public bool IsCompleted { get; set; }
    public DateTime CreatedAt { get; set; }

    public Task(string description)
    {
        Description = description;
        IsCompleted = false;
        CreatedAt = DateTime.Now;
    }

    public override string ToString()
    {
        string status = IsCompleted ? "✓" : "○";
        return $"[{status}] {Description} (создано: {CreatedAt:dd.MM.yyyy HH:mm})";
    }
}

class TodoManager
{
    private List<Task> tasks;
    private const string FILENAME = "tasks.json";

    public TodoManager()
    {
        tasks = new List<Task>();
        LoadTasks();
    }

    
    private void LoadTasks()
    {
        try
        {
            if (File.Exists(FILENAME))
            {
                string json = File.ReadAllText(FILENAME);
                tasks = JsonSerializer.Deserialize<List<Task>>(json) ?? new List<Task>();
                Console.WriteLine($"Загружено {tasks.Count} задач из файла.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке задач: {ex.Message}");
            tasks = new List<Task>();
        }
    }

    
    private void SaveTasks()
    {
        try
        {
            string json = JsonSerializer.Serialize(tasks, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(FILENAME, json);
            Console.WriteLine("Задачи сохранены в файл.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при сохранении задач: {ex.Message}");
        }
    }

    
    public void AddTask()
    {
        Console.Write("Введите описание задачи: ");
        string description = Console.ReadLine();

        if (!string.IsNullOrWhiteSpace(description))
        {
            tasks.Add(new Task(description));
            Console.WriteLine("Задача добавлена!");
            SaveTasks();
        }
        else
        {
            Console.WriteLine("Описание задачи не может быть пустым!");
        }
    }

    
    public void ViewAllTasks()
    {
        if (tasks.Count == 0)
        {
            Console.WriteLine("Список задач пуст.");
            return;
        }

        Console.WriteLine("\n=== СПИСОК ЗАДАЧ ===");
        for (int i = 0; i < tasks.Count; i++)
        {
            Console.WriteLine($"{i + 1}. {tasks[i]}");
        }
        Console.WriteLine($"\nВсего задач: {tasks.Count}");
        Console.WriteLine($"Выполнено: {tasks.Count(t => t.IsCompleted)}");
        Console.WriteLine($"Не выполнено: {tasks.Count(t => !t.IsCompleted)}");
    }

   
    public void MarkTaskAsCompleted()
    {
        if (tasks.Count == 0)
        {
            Console.WriteLine("Список задач пуст.");
            return;
        }

        ViewAllTasks();
        Console.Write("Введите номер задачи для отметки как выполненной: ");
        
        if (int.TryParse(Console.ReadLine(), out int taskNumber) && 
            taskNumber >= 1 && taskNumber <= tasks.Count)
        {
            tasks[taskNumber - 1].IsCompleted = !tasks[taskNumber - 1].IsCompleted;
            string status = tasks[taskNumber - 1].IsCompleted ? "выполненной" : "невыполненной";
            Console.WriteLine($"Задача отмечена как {status}!");
            SaveTasks();
        }
        else
        {
            Console.WriteLine("Неверный номер задачи!");
        }
    }

    
    public void DeleteTask()
    {
        if (tasks.Count == 0)
        {
            Console.WriteLine("Список задач пуст.");
            return;
        }

        ViewAllTasks();
        Console.Write("Введите номер задачи для удаления: ");
        
        if (int.TryParse(Console.ReadLine(), out int taskNumber) && 
            taskNumber >= 1 && taskNumber <= tasks.Count)
        {
            string deletedTask = tasks[taskNumber - 1].Description;
            tasks.RemoveAt(taskNumber - 1);
            Console.WriteLine($"Задача '{deletedTask}' удалена!");
            SaveTasks();
        }
        else
        {
            Console.WriteLine("Неверный номер задачи!");
        }
    }

    
    public void ShowStatistics()
    {
        if (tasks.Count == 0)
        {
            Console.WriteLine("Нет данных для статистики.");
            return;
        }

        int completed = tasks.Count(t => t.IsCompleted);
        int pending = tasks.Count - completed;
        double completionRate = (double)completed / tasks.Count * 100;

        Console.WriteLine("\n=== СТАТИСТИКА ===");
        Console.WriteLine($"Всего задач: {tasks.Count}");
        Console.WriteLine($"Выполнено: {completed}");
        Console.WriteLine($"В процессе: {pending}");
        Console.WriteLine($"Процент выполнения: {completionRate:F1}%");
    }

   
    public void ShowMenu()
    {
        Console.WriteLine("\n=== МЕНЕДЖЕР ЗАДАЧ ===");
        Console.WriteLine("1. Добавить задачу");
        Console.WriteLine("2. Просмотреть все задачи");
        Console.WriteLine("3. Отметить задачу как выполненную/невыполненную");
        Console.WriteLine("4. Удалить задачу");
        Console.WriteLine("5. Показать статистику");
        Console.WriteLine("6. Выход");
        Console.Write("Выберите действие (1-6): ");
    }

    
    public void Run()
    {
        Console.WriteLine("Добро пожаловать в Менеджер Задач!");
        
        while (true)
        {
            ShowMenu();
            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    AddTask();
                    break;
                case "2":
                    ViewAllTasks();
                    break;
                case "3":
                    MarkTaskAsCompleted();
                    break;
                case "4":
                    DeleteTask();
                    break;
                case "5":
                    ShowStatistics();
                    break;
                case "6":
                    Console.WriteLine("До свидания!");
                    return;
                default:
                    Console.WriteLine("Неверный выбор! Попробуйте снова.");
                    break;
            }

            Console.WriteLine("\nНажмите любую клавишу для продолжения...");
            Console.ReadKey();
            Console.Clear();
        }
    }
}

class Program
{
    public static void Main(string[] args)
    {
        TodoManager todoManager = new TodoManager();
        todoManager.Run();
    }
}
